{"version":3,"sources":["Components/Map.js","App.js","serviceWorker.js","main.js","index.js"],"names":["SetMap","Map","target","layers","TileLayer","source","OSM","view","View","center","zoom","interactions","defaultInteractions","extend","DragRotateAndZoom","MapObject","useEffect","className","type","onClick","value","id","App","Boolean","window","location","hostname","match","axios","get","then","res","document","getElementById","append","data","country_name","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iNAWA,SAASA,IACP,IAAIC,IAAI,CACNC,OAAQ,MACRC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,OAGhBC,KAAM,IAAIC,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,IAERC,aAAcC,cAAsBC,OAAO,CAAC,IAAIC,QAsBrCC,MAlBf,WAKE,OAFAC,oBAAUhB,GAGR,yBAAKiB,UAAU,SACb,2BACEA,UAAU,OACVC,KAAK,SACLC,QAASnB,EACToB,MAAM,QAER,yBAAKC,GAAG,MAAMJ,UAAU,WCLfK,MA/Bf,WACE,OACE,6BACE,yBAAKL,UAAU,WACb,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,kCACb,6BACE,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,IAAf,8BACA,qCACA,yBAAKA,UAAU,IAAf,kCAEF,yBAAKA,UAAU,sBACb,sCACA,wCAGJ,yBAAKA,UAAU,qBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,gEACA,yBAAKI,GAAG,YAAR,oBCdME,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBChBNC,EAAMC,IAAI,0BAA0BC,MAAK,SAAAC,GACvCC,SAASC,eAAe,YAAYC,OAAOH,EAAII,KAAKC,iBCMtDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SFsHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.10415686.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"ol/ol.css\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport {\r\n  defaults as defaultInteractions,\r\n  DragRotateAndZoom\r\n} from \"ol/interaction\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport OSM from \"ol/source/OSM\";\r\n\r\nfunction SetMap() {\r\n  new Map({\r\n    target: \"map\",\r\n    layers: [\r\n      new TileLayer({\r\n        source: new OSM()\r\n      })\r\n    ],\r\n    view: new View({\r\n      center: [0, 0],\r\n      zoom: 2\r\n    }),\r\n    interactions: defaultInteractions().extend([new DragRotateAndZoom()])\r\n  });\r\n}\r\n\r\nfunction MapObject() {\r\n  // to run function only once give [] as second parameter\r\n  //   useEffect(SetMap, []);\r\n  useEffect(SetMap);\r\n\r\n  return (\r\n    <div className=\"h-100\">\r\n      <input\r\n        className=\"h-25\"\r\n        type=\"button\"\r\n        onClick={SetMap}\r\n        value=\"set\"\r\n      ></input>\r\n      <div id=\"map\" className=\"h-75\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapObject;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Map from \"./Components/Map\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"content\">\n        <div className=\"col-xl-8 col-lg-10 col-md-12 col-sm-12 h-100\">\n          <div className=\"d-flex flex-column w-100 h-100\">\n            <div>\n              <div className=\"header-content d-flex justify-content-center\">\n                <div className=\"\">Some Explanations - HEADER</div>\n                <span> - </span>\n                <div className=\"\">Github Project Navigator Icon</div>\n              </div>\n              <div className=\"d-flex flex-column\">\n                <div>Exp:1</div>\n                <div>Exp:2</div>\n              </div>\n            </div>\n            <div className=\"w-100 flex-grow-1\">\n              <Map></Map>\n            </div>\n            <div className=\"h-25 d-flex flex-column\">\n              <div>footer area (maybe for results)</div>\n              <div id=\"location\">Location: </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\naxios.get(\"https://ipapi.co/json/\").then(res => {\r\n  document.getElementById(\"location\").append(res.data.country_name);\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./main.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}