{"version":3,"sources":["assets/countries.geojson","assets/rawDataBackup.csv","Components/styles.js","data.js","Components/Map.js","assets/github-brands.svg","App.js","githubData.js","serviceWorker.js","main.js","index.js"],"names":["module","exports","styleForCountry","Style","fill","Fill","color","stroke","Stroke","width","text","Text","font","styleForPoint","image","Circle","radius","styleForHighlight","styleForDiseased","clone","setFill","rawDataBackup","require","rawData","GetRawData","Promise","resolve","Papa","parse","HEROKU_CORS_PROXY_URL","header","skipEmptyLines","download","dynamicTyping","complete","res","error","err","GetCountryStateData","a","then","raw","data","slice","length","coordinates","forEach","row","totalCol","count","i","push","countryName","stateName","totalCase","x","y","filter","elem","GetTotalCase","map","countryLayerSource","VectorSource","url","CountryGeoJson","format","GeoJSON","countryLayer","VectorLayer","name","source","style","feature","getText","setText","get","dataSource","dataLayer","zIndex","tileLayer","TileLayer","OSM","diseasedCountryLayerSource","diseasedCountryLayer","SetMap","Map","target","layers","view","View","center","zoom","maxZoom","interactions","defaultInteractions","extend","DragRotateAndZoom","highlightCountry","highlightData","featureOverlayCountry","featureOverlayData","displayFeatureInfo","pixel","info","document","getElementById","forEachFeatureAtPixel","layer","innerHTML","getId","getSource","removeFeature","addFeature","console","log","on","evt","dragging","getEventPixel","originalEvent","getView","getZoom","newRadius","Math","pow","abs","getImage","setRadius","forEachFeature","setStyle","AddCoordinateFeatures","geom","Point","fromLonLat","Feature","e","start","Date","getTime","listenerKey","event","vectorContext","getVectorContext","frameState","flashGeom","getGeometry","elapsed","time","elapsedRatio","easeOut","opacity","styleForFlash","drawGeometry","unByKey","render","flash","MapObject","catch","useEffect","FetchData","id","className","_extends","Object","assign","arguments","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","_ref","svgRef","title","props","focusable","role","viewBox","ref","ForwardRef","forwardRef","initialValueCountByMonth","value","months","App","useState","totalRepo","setTotalRepo","countByMonths","setCountByMonths","axios","total_count","response","urls","requests","all","spread","responses","getRepoCounts","temp","fetchedCountByMonth","val","index","ctx","getContext","Chart","type","labels","datasets","label","backgroundColor","borderColor","options","countByMonth","rel","href","Boolean","window","location","hostname","match","append","country_name","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dc95df2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countries.ab583aa1.geojson\";","module.exports = __webpack_public_path__ + \"static/media/rawDataBackup.ba45d2a8.csv\";","import { Fill, Stroke, Style, Text, Circle } from \"ol/style\";\r\n\r\nconst initRadius = 3;\r\n\r\nconst styleForCountry = new Style({\r\n  fill: new Fill({\r\n    // color: \"rgba(255, 255, 255, 0.25)\",\r\n    color: \"rgba(255, 255, 255, 0.25)\",\r\n  }),\r\n  stroke: new Stroke({\r\n    // color: \"#319FD3\",\r\n    color: \"#319FD3\",\r\n    width: 1,\r\n  }),\r\n  text: new Text({\r\n    font: \"12px Calibri,sans-serif\",\r\n    fill: new Fill({\r\n      color: \"green\",\r\n    }),\r\n  }),\r\n});\r\n\r\nconst styleForPoint = new Style({\r\n  image: new Circle({\r\n    radius: initRadius,\r\n    fill: new Fill({ color: \"rgba(255, 0, 0, 0.4)\" }),\r\n  }),\r\n});\r\n\r\nconst styleForHighlight = new Style({\r\n  stroke: new Stroke({\r\n    color: \"green\",\r\n    width: 1,\r\n  }),\r\n  fill: new Fill({\r\n    color: \"rgba(255,255,0,0.1)\",\r\n  }),\r\n  text: new Text({\r\n    font: \"12px Calibri,sans-serif\",\r\n    fill: new Fill({\r\n      color: \"green\",\r\n    }),\r\n  }),\r\n});\r\n\r\nconst styleForDiseased = styleForCountry.clone();\r\nstyleForDiseased.setFill(\r\n  new Fill({\r\n    // color: \"rgba(255, 255, 255, 0.75)\",\r\n    color: \"rgba(0, 0, 0, 0.25)\",\r\n  })\r\n);\r\n\r\nexport {\r\n  styleForCountry,\r\n  styleForPoint,\r\n  styleForHighlight,\r\n  styleForDiseased,\r\n  initRadius,\r\n};\r\n","import Papa from \"papaparse\";\r\n\r\n// use raw data from CSSEGISandData repository on github\r\n// https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\r\n\r\n// Data Format\r\n// Provience/State  Country/Region  Lat Long    1/22/20 1/23/20 .... 4/7/20 ... today\r\nconst stateIndex = 0;\r\nconst countryIndex = 1;\r\nconst latitudeIndex = 2;\r\nconst longitudeIndex = 3;\r\nconst dataStartIndex = 4;\r\n// 4, 5, 6 ... and so on --> result day by day start from 1/22/2020\r\n\r\n// TO prevent cors issue use public heroku proxy\r\nconst HEROKU_CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com\";\r\nconst rawDataSource =\r\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\r\n\r\nconst GET_URL = HEROKU_CORS_PROXY_URL + \"/\" + rawDataSource;\r\n\r\nconst rawDataBackup = require(\"./assets/rawDataBackup.csv\");\r\n\r\n/**\r\n * raw data variable will be used to prevent repetitive request to\r\n * original github repository. Fetch it once and use it!\r\n */\r\nlet rawData = null;\r\n\r\n/**\r\n * This function is used for preparing raw data either from original\r\n * CSSEGISandData github repository or local backup file rawDataBackup.csv\r\n * All possible conditions are handled in this function to prevent application crashes.\r\n */\r\nconst GetRawData = () => {\r\n  return new Promise((resolve) => {\r\n    if (rawData === null) {\r\n      // If rawData is null then we haven't request to original data yet.\r\n      // proceed with data request\r\n      Papa.parse(GET_URL, {\r\n        header: false,\r\n        skipEmptyLines: true,\r\n        download: true,\r\n        dynamicTyping: true, //ensures that numbers not turned to strings\r\n        complete: (res) => {\r\n          // Fetch at once. Store it to rawData to use it later!\r\n          rawData = res;\r\n          resolve(rawData);\r\n        },\r\n        error: (err) => {\r\n          // If we can not fetch live data from given url try to load\r\n          // backup data from assets/rawDataBackup.csv\r\n          Papa.parse(rawDataBackup, {\r\n            header: false,\r\n            skipEmptyLines: true,\r\n            download: true,\r\n            dynamicTyping: true, //ensures that numbers not turned to strings\r\n            complete: (res) => {\r\n              // Backup data successfully loaded. Store it to rawData to use it later!\r\n              rawData = res;\r\n              resolve(rawData);\r\n            },\r\n            error: (err) => {\r\n              // this block of code should not be executed at all if backup\r\n              // data is not corrupted - Defensive\r\n              rawData = null;\r\n              resolve(rawData);\r\n            },\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      // If rawData is not null then we already have got our data, return it.\r\n      resolve(rawData);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * This function is used for getting all the coordinates from raw data which is\r\n * fetched by using GetRawData() alongside total case count and seperated\r\n * country/state knowledge.\r\n * This method is exported to use in components such as Map and Chart component\r\n */\r\nconst GetCountryStateData = async function () {\r\n  return new Promise((resolve) => {\r\n    GetRawData().then((raw) => {\r\n      // SOME DATA CLEAN-UP\r\n      // get rid of first line since it is header-column\r\n      raw.data = raw.data.slice(1, raw.data.length);\r\n\r\n      let coordinates = [];\r\n      raw.data.forEach((row) => {\r\n        let totalCol = row.length;\r\n        let count = 0;\r\n        for (let i = dataStartIndex; i < totalCol; ++i) {\r\n          count += row[i];\r\n        }\r\n\r\n        coordinates.push({\r\n          countryName: row[countryIndex] || \"Undefined\",\r\n          stateName: row[stateIndex] || null,\r\n          totalCase: count,\r\n          x: row[longitudeIndex] || 0,\r\n          y: row[latitudeIndex] || 0,\r\n        });\r\n      });\r\n\r\n      // filter empty coordinates\r\n      coordinates = coordinates.filter((elem) => {\r\n        return elem.x !== 0 && elem.y !== 0;\r\n      });\r\n\r\n      resolve(coordinates);\r\n    });\r\n  });\r\n};\r\n\r\nconst GetTotalCase = async function () {\r\n  return new Promise((resolve) => {\r\n    GetRawData().then((raw) => {\r\n      // SOME DATA CLEAN-UP\r\n      // get rid of first line since it is header-column\r\n      raw.data = raw.data.slice(1, raw.data.length);\r\n\r\n      let totalCase = [];\r\n      raw.data.forEach((row) => {\r\n        let totalCol = row.length;\r\n        let count = 0;\r\n        for (let i = dataStartIndex; i < totalCol; ++i) {\r\n          count += row[i];\r\n        }\r\n\r\n        // now we have total disease count for iterated country\r\n        totalCase.push({\r\n          countryName: row[countryIndex] || \"Undefined\",\r\n          totalCase: count,\r\n        });\r\n\r\n        // move on with next country\r\n      });\r\n\r\n      // console.log(totalCase);\r\n      resolve(totalCase);\r\n    });\r\n  });\r\n};\r\n\r\nGetTotalCase();\r\n\r\nexport { GetCountryStateData, GetTotalCase };\r\n","import React, { useEffect } from \"react\";\r\nimport \"ol/ol.css\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport {\r\n  defaults as defaultInteractions,\r\n  DragRotateAndZoom,\r\n} from \"ol/interaction\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport GeoJSON from \"ol/format/GeoJSON\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport { Stroke, Style, Circle, Fill } from \"ol/style\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport CountryGeoJson from \"../assets/countries.geojson\";\r\nimport { getVectorContext } from \"ol/render\";\r\nimport { easeOut } from \"ol/easing\";\r\nimport { unByKey } from \"ol/Observable\";\r\n\r\nimport {\r\n  styleForCountry,\r\n  styleForPoint,\r\n  styleForHighlight,\r\n  styleForDiseased,\r\n  initRadius,\r\n} from \"./styles\";\r\n\r\nimport { GetCountryStateData } from \"../data\";\r\n\r\n// This should be defined out of SetMap function. Otherwise every time component renders, it will create mapObj again and a new map will be created too.\r\n// So define it in here and handle null check before map creation.\r\nvar map = null;\r\nvar coordinates = [];\r\nvar countryLayerSource = new VectorSource({\r\n  url: CountryGeoJson,\r\n  format: new GeoJSON(),\r\n});\r\nvar countryLayer = new VectorLayer({\r\n  name: \"country\",\r\n  source: countryLayerSource,\r\n  style: function (feature) {\r\n    styleForCountry.getText().setText(feature.get(\"name\"));\r\n    return styleForCountry;\r\n  },\r\n});\r\nvar dataSource = new VectorSource({});\r\n\r\nvar dataLayer = new VectorLayer({\r\n  name: \"data\",\r\n  source: dataSource,\r\n  zIndex: 1, // this is important to reach out circles on country layer\r\n});\r\n\r\nvar tileLayer = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nvar diseasedCountryLayerSource = new VectorSource({});\r\nvar diseasedCountryLayer = new VectorLayer({\r\n  name: \"diseased\",\r\n  source: diseasedCountryLayerSource,\r\n  style: function (feature) {\r\n    return styleForDiseased;\r\n  },\r\n});\r\n\r\nvar duration = 3000;\r\nfunction flash(feature) {\r\n  var start = new Date().getTime();\r\n  var listenerKey = tileLayer.on(\"postrender\", animate);\r\n\r\n  function animate(event) {\r\n    var vectorContext = getVectorContext(event);\r\n    var frameState = event.frameState;\r\n    var flashGeom = feature.getGeometry().clone();\r\n    var elapsed = frameState.time - start;\r\n    var elapsedRatio = elapsed / duration;\r\n    // radius will be 5 at start and 30 at end.\r\n    // var radius = easeOut(elapsedRatio) * 25 + 5;\r\n    var radius = easeOut(elapsedRatio) * 2 + 3;\r\n    var opacity = easeOut(1 - elapsedRatio);\r\n\r\n    var styleForFlash = new Style({\r\n      image: new Circle({\r\n        radius: radius,\r\n        stroke: new Stroke({\r\n          color: \"rgba(255, 0, 0, \" + opacity + \")\",\r\n          width: 0.25 + opacity,\r\n        }),\r\n      }),\r\n    });\r\n\r\n    vectorContext.setStyle(styleForFlash);\r\n    vectorContext.drawGeometry(flashGeom);\r\n    if (elapsed > duration) {\r\n      unByKey(listenerKey);\r\n      return;\r\n    }\r\n    // tell OpenLayers to continue postrender animation\r\n    map.render();\r\n  }\r\n}\r\n\r\ndataSource.on(\"addfeature\", function (e) {\r\n  flash(e.feature);\r\n});\r\n\r\nfunction SetMap() {\r\n  if (map === null) {\r\n    map = new Map({\r\n      target: \"map\",\r\n      layers: [tileLayer, countryLayer, diseasedCountryLayer, dataLayer],\r\n      view: new View({\r\n        center: [0, 0],\r\n        zoom: 0,\r\n        maxZoom: 6,\r\n      }),\r\n      interactions: defaultInteractions().extend([new DragRotateAndZoom()]),\r\n    });\r\n  }\r\n\r\n  var featureOverlayCountry = new VectorLayer({\r\n    source: new VectorSource(),\r\n    map: map,\r\n    style: function (feature) {\r\n      styleForHighlight.getText().setText(feature.get(\"name\"));\r\n      return styleForHighlight;\r\n    },\r\n    zIndex: 0,\r\n  });\r\n\r\n  var featureOverlayData = new VectorLayer({\r\n    source: new VectorSource(),\r\n    map: map,\r\n    style: function (feature) {\r\n      return styleForPoint;\r\n    },\r\n    zIndex: 1,\r\n  });\r\n\r\n  var highlightCountry;\r\n  var highlightData;\r\n  var displayFeatureInfo = function (pixel) {\r\n    var info = document.getElementById(\"info\");\r\n\r\n    map.forEachFeatureAtPixel(pixel, function (feature, layer) {\r\n      if (layer) {\r\n        // handle country layer and data layer seperately\r\n        switch (layer.get(\"name\")) {\r\n          case \"country\":\r\n            if (feature) {\r\n              info.innerHTML = feature.getId() + \": \" + feature.get(\"name\");\r\n            } else {\r\n              info.innerHTML = \"&nbsp;\";\r\n            }\r\n            if (feature !== highlightCountry) {\r\n              if (highlightCountry) {\r\n                featureOverlayCountry\r\n                  .getSource()\r\n                  .removeFeature(highlightCountry);\r\n              }\r\n              if (feature) {\r\n                featureOverlayCountry.getSource().addFeature(feature);\r\n              }\r\n              highlightCountry = feature;\r\n            }\r\n            break;\r\n          case \"data\":\r\n            if (feature !== highlightData) {\r\n              if (highlightData) {\r\n                featureOverlayData.getSource().removeFeature(highlightData);\r\n              }\r\n              if (feature) {\r\n                featureOverlayData.getSource().addFeature(feature);\r\n              }\r\n              highlightData = feature;\r\n            }\r\n            break;\r\n          default:\r\n            console.log(2);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  map.on(\"pointermove\", function (evt) {\r\n    if (evt.dragging) {\r\n      return;\r\n    }\r\n    var pixel = map.getEventPixel(evt.originalEvent);\r\n    displayFeatureInfo(pixel);\r\n  });\r\n\r\n  map.on(\"click\", function (evt) {\r\n    displayFeatureInfo(evt.pixel);\r\n  });\r\n\r\n  map.getView().on(\"change:resolution\", function (evt) {\r\n    let zoom = map.getView().getZoom();\r\n    let newRadius = Math.pow(Math.abs(zoom - 2), 2) + initRadius;\r\n\r\n    // Update only radius of point/circle features\r\n    styleForPoint.getImage().setRadius(newRadius);\r\n\r\n    dataLayer.getSource().forEachFeature(function (feature) {\r\n      feature.setStyle(styleForPoint);\r\n    });\r\n  });\r\n}\r\n\r\nfunction SetDiseasedCountries() {\r\n  // Change color of diseased countries\r\n  // TODO\r\n  // countryLayerSource.forEachFeature((feature) => {\r\n  //   console.log(1);\r\n  // });\r\n}\r\n\r\nfunction AddCoordinateFeatures(elem) {\r\n  // var geom = new Point(fromLonLat([coordinates[index].x, locations[index].y]));\r\n  var geom = new Point(fromLonLat([elem.x, elem.y]));\r\n  var feature = new Feature(geom);\r\n  feature.setStyle(styleForPoint);\r\n  dataSource.addFeature(feature);\r\n}\r\n\r\nfunction MapObject() {\r\n  // to run function only once give [] as second parameter\r\n\r\n  async function FetchData() {\r\n    // Wait for response\r\n    await GetCountryStateData()\r\n      .then((res) => {\r\n        coordinates = res;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    // now coordinates are ready - set map data\r\n    SetMap();\r\n    SetDiseasedCountries();\r\n    coordinates.forEach((elem) => {\r\n      AddCoordinateFeatures(elem);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    FetchData();\r\n  }, []);\r\n\r\n  return <div id=\"map\" className=\"h-100\"></div>;\r\n}\r\n\r\nexport default MapObject;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n});\n\nvar SvgGithubBrands = function SvgGithubBrands(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fab\",\n    \"data-icon\": \"github\",\n    className: \"svg-inline--fa fa-github fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 496 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGithubBrands, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github-brands.ec5bc1b3.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.scss\";\n\n// get map component\nimport Map from \"./Components/Map\";\n// get chart component\n// import Chart from \"./Components/Chart\";\nimport Chart from \"chart.js\";\n\n// get exported javascript functions\nimport { getTotalRepoCount, getRepoCounts } from \"./githubData.js\";\n\n// import github icon\nimport { ReactComponent as GithubLogo } from \"./assets/github-brands.svg\";\n\nconst initialValueCountByMonth = [\n  { id: 0, value: 0 },\n  { id: 1, value: 0 },\n  { id: 2, value: 0 },\n  { id: 3, value: 0 },\n];\nconst months = [\"January\", \"February\", \"March\", \"April\"];\n\nfunction App() {\n  const [totalRepo, setTotalRepo] = useState(0);\n  const [countByMonths, setCountByMonths] = useState(initialValueCountByMonth);\n\n  useEffect(() => {\n    getTotalRepoCount().then((response) => setTotalRepo(response));\n\n    getRepoCounts()\n      .then(\n        axios.spread((...res) => {\n          var [...temp] = [...res];\n          const fetchedCountByMonth = temp.map((val, index) => {\n            return { id: index, value: val.data.total_count };\n          });\n          setCountByMonths(fetchedCountByMonth);\n        })\n      )\n      .catch((err) => {\n        console.log(\"error on getRepoCounts(): \" + err);\n      });\n\n    var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n    var chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: \"line\",\n\n      // The data for our dataset\n      data: {\n        labels: [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n        ],\n        datasets: [\n          {\n            label: \"My First dataset\",\n            backgroundColor: \"rgb(255, 99, 132)\",\n            borderColor: \"rgb(255, 99, 132)\",\n            data: [0, 10, 5, 2, 20, 30, 45],\n          },\n        ],\n      },\n\n      // Configuration options go here\n      options: {},\n    });\n  }, []);\n\n  return (\n    <div className=\"content\">\n      <div className=\"col-xl-8 col-lg-10 col-md-12 col-sm-12 h-100\">\n        <div className=\"d-flex flex-column w-100 h-100\">\n          <div>\n            <div className=\"header-content d-flex justify-content-center\">\n              <div className=\"title mb-2\">COVID Disease Tracker by Country</div>\n            </div>\n            <div className=\"d-flex\">\n              <div className=\"total-repo-count\">\n                Total number of COVID related repositories on Github:{\" \"}\n                {totalRepo}\n              </div>\n              <div className=\"ml-auto\" id=\"info\"></div>\n            </div>\n          </div>\n          <div className=\"w-100 h-50\">\n            <Map></Map>\n          </div>\n          {/* <Chart></Chart> */}\n          <div className=\"w-100 h-25 bg-dark\">\n            <canvas id=\"myChart\"></canvas>\n          </div>\n          <div className=\"d-flex flex-row w-100 rounded-lg bg-dark justify-content-around\">\n            {countByMonths.map((countByMonth, index) => (\n              <div key={countByMonth.id}>\n                Repo Counts on {months[index]}: {countByMonth.value}\n              </div>\n            ))}\n          </div>\n          <div className=\"d-flex flex-column\">\n            <div id=\"location\">Location: </div>\n            <div className=\"logo text-center h2 pb-3\">\n              <a\n                className=\"h-100\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/Ardahan-Kisbet/COVID-19\"\n              >\n                <GithubLogo className=\"svg h-100\"></GithubLogo>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\r\n\r\nexport const getTotalRepoCount = () => {\r\n  return axios\r\n    .get(\r\n      \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:>2020-01-01\"\r\n    )\r\n    .then((res) => {\r\n      return res.data.total_count;\r\n    })\r\n    .catch((err) => {\r\n      return 0;\r\n    });\r\n};\r\n\r\nexport const getRepoCounts = () => {\r\n  const urls = [\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-01-01..2020-01-31\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-02-01..2020-02-29\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-03-01..2020-03-31\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-04-01..*\",\r\n  ];\r\n\r\n  const requests = [\r\n    axios.get(urls[0]),\r\n    axios.get(urls[1]),\r\n    axios.get(urls[2]),\r\n    axios.get(urls[3]),\r\n  ];\r\n\r\n  return axios\r\n    .all([requests[0], requests[1], requests[2], requests[3]])\r\n    .then(\r\n      axios.spread((...responses) => {\r\n        return responses;\r\n        // const res1 = responses[0];\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      return 0;\r\n    });\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\naxios.get(\"https://ipapi.co/json/\").then((res) => {\r\n  document.getElementById(\"location\").append(res.data.country_name);\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./main.js\";\nimport \"./data.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}