{"version":3,"sources":["assets/countries.geojson","assets/rawDataBackup.csv","assets/rawDeathsDataBackup.csv","assets/rawRecoveredDataBackup.csv","Components/styles.js","Components/Map.js","data.js","assets/countriesLookupTable.js","Components/Chart.js","Components/PieChart.js","Components/Github.js","githubData.js","assets/github-brands.svg","App.js","serviceWorker.js","main.js","index.js"],"names":["module","exports","styleForCountry","Style","fill","Fill","color","stroke","Stroke","width","text","Text","font","styleForPoint","image","Circle","radius","styleForHighlight","styleForDiseased","clone","setFill","callback","rawDataBackup","require","rawDeathsDataBackup","rawRecoveredDataBackup","rawData","rawDeathsData","rawRecoveredData","coordinates","GetCountryStateData","a","Promise","resolve","Papa","parse","HEROKU_CORS_PROXY_URL","header","skipEmptyLines","download","dynamicTyping","complete","res","error","err","then","raw","undefined","length","months","totalCol","data","i","date","Date","currMonth","getMonth","currYear","getFullYear","isExist","findIndex","x","key","push","daysCount","month","year","slice","forEach","row","caseByMonth","prevCount","m","count","days","totalCase","reduce","sum","elem","countryName","stateName","detailedCase","y","filter","GetDeathsGlobalData","deaths","GetRecoveredGlobalData","recoveries","map","countryLayerSource","VectorSource","url","CountryGeoJson","format","GeoJSON","countryLayer","VectorLayer","name","source","style","feature","getText","setText","get","dataSource","dataLayer","zIndex","tileLayer","TileLayer","OSM","tooltip","tooltipOverlay","diseasedCountryLayerSource","diseasedCountryLayer","SetMap","Map","target","layers","view","View","center","zoom","maxZoom","interactions","defaultInteractions","extend","DragRotateAndZoom","document","getElementById","Overlay","element","offset","positioning","addOverlay","highlightCountry","highlightData","featureOverlayCountry","featureOverlayData","displayFeatureInfo","pixel","info","forEachFeatureAtPixel","layer","innerHTML","getId","getSource","removeFeature","addFeature","on","evt","dragging","getEventPixel","originalEvent","circleExist","display","setPosition","coordinate","displayTooltip","searchCountry","updateChart","getView","getZoom","newRadius","Math","pow","abs","getImage","setRadius","forEachFeature","setStyle","AddCoordinateFeatures","geom","Point","fromLonLat","Feature","setProperties","e","start","getTime","listenerKey","event","vectorContext","getVectorContext","frameState","flashGeom","getGeometry","elapsed","time","elapsedRatio","easeOut","opacity","styleForFlash","drawGeometry","unByKey","render","flash","MapObject","props","catch","console","log","SetCountryName","useEffect","FetchData","id","className","countryDictionary","Afghanistan","Angola","Albania","Argentina","Armenia","Antarctica","Australia","Austria","Azerbaijan","Burundi","Belgium","Benin","Bangladesh","Bulgaria","Belarus","Belize","Bermuda","Bolivia","Brazil","Brunei","Bhutan","Botswana","Canada","Switzerland","Chile","China","Cameroon","Colombia","Cuba","Cyprus","Germany","Djibouti","Denmark","Algeria","Ecuador","Egypt","Eritrea","Spain","Estonia","Ethiopia","Finland","Fiji","France","Gabon","Georgia","Ghana","Guinea","Gambia","Greece","Greenland","Guatemala","Guyana","Honduras","Croatia","Haiti","Hungary","Indonesia","India","Ireland","Iran","Iraq","Iceland","Israel","Italy","Jamaica","Jordan","Japan","Kazakhstan","Kenya","Kyrgyzstan","Cambodia","Kosovo","Kuwait","Laos","Lebanon","Liberia","Libya","Lesotho","Lithuania","Luxembourg","Latvia","Morocco","Moldova","Madagascar","Mexico","Macedonia","Mali","Myanmar","Montenegro","Mongolia","Mozambique","Mauritania","Malawi","Malaysia","Namibia","Niger","Nigeria","Nicaragua","Netherlands","Norway","Nepal","Oman","Pakistan","Panama","Peru","Philippines","Poland","Portugal","Paraguay","Qatar","Romania","Russia","Rwanda","Sudan","Senegal","Somaliland","Somalia","Suriname","Slovakia","Slovenia","Sweden","Swaziland","Syria","Chad","Togo","Thailand","Tajikistan","Turkmenistan","Tunisia","Turkey","Taiwan","Uganda","Ukraine","Uruguay","Uzbekistan","Venezuela","Vietnam","Vanuatu","Yemen","Zambia","Zimbabwe","ChartRangeEnum","ctx","Chart","chart","backupData","chartRange","Init","Update","labels","total","clear","datasets","dataset","label","options","title","update","Lookup","found","CountryLookupTable","FilterChartRange","unfilteredCountryDiseaseData","dateRangeEnd","dateRangeStart","valueOf","setFullYear","setDate","currentCase","currentCasesDate","monthsReference","active","find","getContext","ChartComponent","type","backgroundColor","borderColor","responsive","maintainAspectRatio","ReDraw","CountryName","countries","country","ChartCanvas","useState","dataFound","setDataFound","draw","background","height","alignItems","justifyContent","backupDataDeaths","backupDataRecovered","totalDeath","totalRecover","countriesForDeaths","countriesForRecoveries","totalRecovery","PieChartCanvas","initialValueCountByMonth","value","Github","useCookies","cookies","setCookie","removeCookie","totalRepo","setTotalRepo","countByMonths","setCountByMonths","totalRepoCount","axios","total_count","response","JSON","stringify","path","maxAge","monthlyRepoCount","monthlyData","urls","requests","all","spread","responses","getRepoCounts","temp","fetchedCountByMonth","val","index","cookieObject","countByMonth","_extends","Object","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","_ref","svgRef","focusable","role","viewBox","ref","ForwardRef","forwardRef","App","setCountryName","PieChart","border","borderRadius","rel","href","Boolean","window","location","hostname","match","append","country_name","ReactDOM","StrictMode","CookiesProvider","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bbf90700.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countries.ab583aa1.geojson\";","module.exports = __webpack_public_path__ + \"static/media/rawDataBackup.795ce5b0.csv\";","module.exports = __webpack_public_path__ + \"static/media/rawDeathsDataBackup.9f0d6bbb.csv\";","module.exports = __webpack_public_path__ + \"static/media/rawRecoveredDataBackup.897b8c3b.csv\";","import { Fill, Stroke, Style, Text, Circle } from \"ol/style\";\r\n\r\nconst initRadius = 3;\r\n\r\nconst styleForCountry = new Style({\r\n  fill: new Fill({\r\n    // color: \"rgba(255, 255, 255, 0.25)\",\r\n    color: \"rgba(255, 255, 255, 0.25)\",\r\n  }),\r\n  stroke: new Stroke({\r\n    // color: \"#319FD3\",\r\n    color: \"#319FD3\",\r\n    width: 1,\r\n  }),\r\n  text: new Text({\r\n    font: \"12px Calibri,sans-serif\",\r\n    fill: new Fill({\r\n      color: \"green\",\r\n    }),\r\n  }),\r\n});\r\n\r\nconst styleForPoint = new Style({\r\n  image: new Circle({\r\n    radius: initRadius,\r\n    fill: new Fill({ color: \"rgba(255, 0, 0, 0.4)\" }),\r\n  }),\r\n});\r\n\r\nconst styleForHighlight = new Style({\r\n  stroke: new Stroke({\r\n    color: \"green\",\r\n    width: 1,\r\n  }),\r\n  fill: new Fill({\r\n    color: \"rgba(255,255,0,0.1)\",\r\n  }),\r\n  text: new Text({\r\n    font: \"12px Calibri,sans-serif\",\r\n    fill: new Fill({\r\n      color: \"green\",\r\n    }),\r\n  }),\r\n});\r\n\r\nconst styleForDiseased = styleForCountry.clone();\r\nstyleForDiseased.setFill(\r\n  new Fill({\r\n    // color: \"rgba(255, 255, 255, 0.75)\",\r\n    color: \"rgba(0, 0, 0, 0.25)\",\r\n  })\r\n);\r\n\r\nexport {\r\n  styleForCountry,\r\n  styleForPoint,\r\n  styleForHighlight,\r\n  styleForDiseased,\r\n  initRadius,\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"ol/ol.css\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport {\r\n  defaults as defaultInteractions,\r\n  DragRotateAndZoom,\r\n} from \"ol/interaction\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport GeoJSON from \"ol/format/GeoJSON\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport { Stroke, Style, Circle } from \"ol/style\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport CountryGeoJson from \"../assets/countries.geojson\";\r\nimport { getVectorContext } from \"ol/render\";\r\nimport { easeOut } from \"ol/easing\";\r\nimport { unByKey } from \"ol/Observable\";\r\nimport Overlay from \"ol/Overlay\";\r\n\r\nimport {\r\n  styleForCountry,\r\n  styleForPoint,\r\n  styleForHighlight,\r\n  styleForDiseased,\r\n  initRadius,\r\n} from \"./styles\";\r\n\r\nimport { GetCountryStateData } from \"../data\";\r\n\r\n// This should be defined out of SetMap function. Otherwise every time component renders, it will create mapObj again and a new map will be created too.\r\n// So define it in here and handle null check before map creation.\r\nvar map = null;\r\nvar coordinates = [];\r\nvar countryLayerSource = new VectorSource({\r\n  url: CountryGeoJson,\r\n  format: new GeoJSON(),\r\n});\r\nvar countryLayer = new VectorLayer({\r\n  name: \"country\",\r\n  source: countryLayerSource,\r\n  style: function (feature) {\r\n    styleForCountry.getText().setText(feature.get(\"name\"));\r\n    return styleForCountry;\r\n  },\r\n});\r\nvar dataSource = new VectorSource({});\r\n\r\nvar dataLayer = new VectorLayer({\r\n  name: \"data\",\r\n  source: dataSource,\r\n  zIndex: 1, // this is important to reach out circles on country layer\r\n});\r\n\r\nvar tileLayer = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nvar tooltip = null;\r\nvar tooltipOverlay = null;\r\n\r\nvar diseasedCountryLayerSource = new VectorSource({});\r\nvar diseasedCountryLayer = new VectorLayer({\r\n  name: \"diseased\",\r\n  source: diseasedCountryLayerSource,\r\n  style: function (feature) {\r\n    return styleForDiseased;\r\n  },\r\n});\r\n\r\nvar duration = 3000;\r\nfunction flash(feature) {\r\n  var start = new Date().getTime();\r\n  var listenerKey = tileLayer.on(\"postrender\", animate);\r\n\r\n  function animate(event) {\r\n    var vectorContext = getVectorContext(event);\r\n    var frameState = event.frameState;\r\n    var flashGeom = feature.getGeometry().clone();\r\n    var elapsed = frameState.time - start;\r\n    var elapsedRatio = elapsed / duration;\r\n    // radius will be 5 at start and 30 at end.\r\n    // var radius = easeOut(elapsedRatio) * 25 + 5;\r\n    var radius = easeOut(elapsedRatio) * 2 + 3;\r\n    var opacity = easeOut(1 - elapsedRatio);\r\n\r\n    var styleForFlash = new Style({\r\n      image: new Circle({\r\n        radius: radius,\r\n        stroke: new Stroke({\r\n          color: \"rgba(255, 0, 0, \" + opacity + \")\",\r\n          width: 0.25 + opacity,\r\n        }),\r\n      }),\r\n    });\r\n\r\n    vectorContext.setStyle(styleForFlash);\r\n    vectorContext.drawGeometry(flashGeom);\r\n    if (elapsed > duration) {\r\n      unByKey(listenerKey);\r\n      return;\r\n    }\r\n    // tell OpenLayers to continue postrender animation\r\n    map.render();\r\n  }\r\n}\r\n\r\ndataSource.on(\"addfeature\", function (e) {\r\n  flash(e.feature);\r\n});\r\n\r\nfunction SetMap() {\r\n  if (map === null) {\r\n    map = new Map({\r\n      target: \"map\",\r\n      layers: [tileLayer, countryLayer, diseasedCountryLayer, dataLayer],\r\n      view: new View({\r\n        center: [0, 0],\r\n        zoom: 0,\r\n        maxZoom: 6,\r\n      }),\r\n      interactions: defaultInteractions().extend([new DragRotateAndZoom()]),\r\n    });\r\n\r\n    tooltip = document.getElementById(\"tooltip\");\r\n    tooltipOverlay = new Overlay({\r\n      element: tooltip,\r\n      offset: [10, 0],\r\n      positioning: \"bottom-left\",\r\n    });\r\n    map.addOverlay(tooltipOverlay);\r\n  }\r\n\r\n  var featureOverlayCountry = new VectorLayer({\r\n    source: new VectorSource(),\r\n    map: map,\r\n    style: function (feature) {\r\n      styleForHighlight.getText().setText(feature.get(\"name\"));\r\n      return styleForHighlight;\r\n    },\r\n    zIndex: 0,\r\n  });\r\n\r\n  var featureOverlayData = new VectorLayer({\r\n    source: new VectorSource(),\r\n    map: map,\r\n    style: function (feature) {\r\n      return styleForPoint;\r\n    },\r\n    zIndex: 1,\r\n  });\r\n\r\n  var highlightCountry;\r\n  var highlightData;\r\n  var displayFeatureInfo = function (pixel) {\r\n    var info = document.getElementById(\"info\");\r\n\r\n    map.forEachFeatureAtPixel(pixel, function (feature, layer) {\r\n      if (layer) {\r\n        // handle country layer and data layer seperately\r\n        switch (layer.get(\"name\")) {\r\n          case \"country\":\r\n            if (feature) {\r\n              info.innerHTML = feature.getId() + \": \" + feature.get(\"name\");\r\n            } else {\r\n              info.innerHTML = \"&nbsp;\";\r\n            }\r\n            if (feature !== highlightCountry) {\r\n              if (highlightCountry) {\r\n                featureOverlayCountry\r\n                  .getSource()\r\n                  .removeFeature(highlightCountry);\r\n              }\r\n              if (feature) {\r\n                featureOverlayCountry.getSource().addFeature(feature);\r\n              }\r\n              highlightCountry = feature;\r\n            }\r\n            break;\r\n          case \"data\":\r\n            if (feature !== highlightData) {\r\n              if (highlightData) {\r\n                featureOverlayData.getSource().removeFeature(highlightData);\r\n              }\r\n              if (feature) {\r\n                featureOverlayData.getSource().addFeature(feature);\r\n              }\r\n              highlightData = feature;\r\n            }\r\n\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // tooltip operations\r\n  const displayTooltip = (evt) => {\r\n    let circleExist = false;\r\n    map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {\r\n      if (layer) {\r\n        if (layer.get(\"name\") === \"data\") {\r\n          if (feature) {\r\n            tooltip.style.display = \"\";\r\n            tooltipOverlay.setPosition(evt.coordinate);\r\n\r\n            let text = \"\";\r\n            if (feature.get(\"stateName\") != null) {\r\n              text = `Total Disease (${feature.get(\r\n                \"stateName\"\r\n              )}): ${feature.get(\"totalCase\")}`;\r\n            } else {\r\n              text = `Total Disease: ${feature.get(\"totalCase\")}`;\r\n            }\r\n            tooltip.innerHTML = text;\r\n            circleExist = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!circleExist) {\r\n      // then there is no circle in this coordinate close tooltip\r\n      tooltip.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  // display clicked country's chart\r\n  const updateChart = (evt) => {\r\n    map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {\r\n      if (layer) {\r\n        if (layer.get(\"name\") === \"country\") {\r\n          if (feature) {\r\n            let searchCountry = feature.get(\"name\");\r\n            // callback to update chart line according to selected country\r\n            callback(searchCountry);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  map.on(\"pointermove\", function (evt) {\r\n    if (evt.dragging) {\r\n      return;\r\n    }\r\n    var pixel = map.getEventPixel(evt.originalEvent);\r\n    displayFeatureInfo(pixel);\r\n  });\r\n\r\n  map.on(\"click\", function (evt) {\r\n    displayFeatureInfo(evt.pixel);\r\n    displayTooltip(evt);\r\n\r\n    // change chart\r\n    updateChart(evt);\r\n  });\r\n\r\n  map.getView().on(\"change:resolution\", function (evt) {\r\n    let zoom = map.getView().getZoom();\r\n    let newRadius = Math.pow(Math.abs(zoom - 2), 2) + initRadius;\r\n\r\n    // Update only radius of point/circle features\r\n    styleForPoint.getImage().setRadius(newRadius);\r\n\r\n    dataLayer.getSource().forEachFeature(function (feature) {\r\n      feature.setStyle(styleForPoint);\r\n    });\r\n  });\r\n}\r\n\r\nfunction SetDiseasedCountries() {\r\n  // Change color of diseased countries\r\n  // TODO\r\n  // countryLayerSource.forEachFeature((feature) => {\r\n  //   console.log(1);\r\n  // });\r\n}\r\n\r\nfunction AddCoordinateFeatures(elem) {\r\n  var geom = new Point(fromLonLat([elem.x, elem.y]));\r\n  var feature = new Feature(geom);\r\n  feature.setProperties(elem);\r\n  feature.setStyle(styleForPoint);\r\n  dataSource.addFeature(feature);\r\n}\r\n\r\nvar callback;\r\n\r\nfunction MapObject(props) {\r\n  callback = props.SetCountryName;\r\n  async function FetchData() {\r\n    // Wait for response\r\n    await GetCountryStateData()\r\n      .then((res) => {\r\n        coordinates = res;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    // now coordinates are ready - set map data\r\n    SetDiseasedCountries();\r\n    coordinates.forEach((elem) => {\r\n      AddCoordinateFeatures(elem);\r\n    });\r\n  }\r\n\r\n  // to run function only once give [] empty array as second parameter\r\n  useEffect(() => {\r\n    SetMap();\r\n    FetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"map\" className=\"h-100\">\r\n      <div id=\"tooltip\" className=\"customTooltip\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapObject;\r\n","import Papa from \"papaparse\";\r\n\r\n// use raw data from CSSEGISandData repository on github\r\n// https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\r\n\r\n// Data Format\r\n// Provience/State  Country/Region  Lat Long    1/22/20 1/23/20 .... 4/7/20 ... today\r\nconst stateIndex = 0;\r\nconst countryIndex = 1;\r\nconst latitudeIndex = 2;\r\nconst longitudeIndex = 3;\r\nconst dataStartIndex = 4;\r\n// 4, 5, 6 ... and so on --> result day by day start from 1/22/2020\r\n\r\n// TO prevent cors issue use public heroku proxy\r\nconst HEROKU_CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com\";\r\nconst rawDataSource =\r\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\r\n\r\n// use deaths raw data from CSSEGISandData repository on github\r\n// https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\r\nconst deathsDataSource =\r\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\r\n\r\n// use recovered raw data from CSSEGISandData repository on github\r\n// https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\r\nconst recoveredDataSource =\r\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\";\r\n\r\nconst GET_URL_RAW_DATA = HEROKU_CORS_PROXY_URL + \"/\" + rawDataSource;\r\nconst GET_URL_DEATHS_DATA = HEROKU_CORS_PROXY_URL + \"/\" + deathsDataSource;\r\nconst GET_URL_RECOVERED_DATA =\r\n  HEROKU_CORS_PROXY_URL + \"/\" + recoveredDataSource;\r\n\r\nconst rawDataBackup = require(\"./assets/rawDataBackup.csv\");\r\nconst rawDeathsDataBackup = require(\"./assets/rawDeathsDataBackup.csv\");\r\nconst rawRecoveredDataBackup = require(\"./assets/rawRecoveredDataBackup.csv\");\r\n\r\n/**\r\n * raw data variable will be used to prevent repetitive request to\r\n * original github repository. Fetch it once and use it!\r\n */\r\nlet rawData = null;\r\nlet rawDeathsData = null;\r\nlet rawRecoveredData = null;\r\nlet coordinates = [];\r\n/**\r\n * This function is used for preparing raw data either from original\r\n * CSSEGISandData github repository or local backup file rawDataBackup.csv\r\n * All possible conditions are handled in this function to prevent application crashes.\r\n */\r\nconst GetRawData = () => {\r\n  return new Promise((resolve) => {\r\n    if (rawData === null) {\r\n      // If rawData is null then we haven't request to original data yet.\r\n      // proceed with data request\r\n      Papa.parse(GET_URL_RAW_DATA, {\r\n        header: false,\r\n        skipEmptyLines: true,\r\n        download: true,\r\n        dynamicTyping: true, //ensures that numbers not turned to strings\r\n        complete: (res) => {\r\n          // Fetch at once. Store it to rawData to use it later!\r\n          rawData = res;\r\n          resolve(rawData);\r\n        },\r\n        error: (err) => {\r\n          // If we can not fetch live data from given url try to load\r\n          // backup data from assets/rawDataBackup.csv\r\n          Papa.parse(rawDataBackup, {\r\n            header: false,\r\n            skipEmptyLines: true,\r\n            download: true,\r\n            dynamicTyping: true, //ensures that numbers not turned to strings\r\n            complete: (res) => {\r\n              // Backup data successfully loaded. Store it to rawData to use it later!\r\n              rawData = res;\r\n              resolve(rawData);\r\n            },\r\n            error: (err) => {\r\n              // this block of code should not be executed at all if backup\r\n              // data is not corrupted - Defensive\r\n              rawData = null;\r\n              resolve(rawData);\r\n            },\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      // If rawData is not null then we already have got our data, return it.\r\n      resolve(rawData);\r\n    }\r\n  });\r\n};\r\n\r\nconst GetRawDeathsData = () => {\r\n  return new Promise((resolve) => {\r\n    if (rawDeathsData === null) {\r\n      // If rawDeathsData is null then we haven't request to original data yet.\r\n      // proceed with data request\r\n      Papa.parse(GET_URL_DEATHS_DATA, {\r\n        header: false,\r\n        skipEmptyLines: true,\r\n        download: true,\r\n        dynamicTyping: true, //ensures that numbers not turned to strings\r\n        complete: (res) => {\r\n          // Fetch at once. Store it to rawDeathsData to use it later!\r\n          rawDeathsData = res;\r\n          resolve(rawDeathsData);\r\n        },\r\n        error: (err) => {\r\n          // If we can not fetch live data from given url try to load\r\n          // backup data from assets/rawDeathsDataBackup.csv\r\n          Papa.parse(rawDeathsDataBackup, {\r\n            header: false,\r\n            skipEmptyLines: true,\r\n            download: true,\r\n            dynamicTyping: true, //ensures that numbers not turned to strings\r\n            complete: (res) => {\r\n              // Backup data successfully loaded. Store it to rawDeathsData to use it later!\r\n              rawDeathsData = res;\r\n              resolve(rawDeathsData);\r\n            },\r\n            error: (err) => {\r\n              // this block of code should not be executed at all if backup\r\n              // data is not corrupted - Defensive\r\n              rawDeathsData = null;\r\n              resolve(rawDeathsData);\r\n            },\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      // If rawData is not null then we already have got our data, return it.\r\n      resolve(rawDeathsData);\r\n    }\r\n  });\r\n};\r\n\r\nconst GetRawRecoveredData = () => {\r\n  return new Promise((resolve) => {\r\n    if (rawRecoveredData === null) {\r\n      // If rawRecoveredData is null then we haven't request to original data yet.\r\n      // proceed with data request\r\n      Papa.parse(GET_URL_RECOVERED_DATA, {\r\n        header: false,\r\n        skipEmptyLines: true,\r\n        download: true,\r\n        dynamicTyping: true, //ensures that numbers not turned to strings\r\n        complete: (res) => {\r\n          // Fetch at once. Store it to rawRecoveredData to use it later!\r\n          rawRecoveredData = res;\r\n          resolve(rawRecoveredData);\r\n        },\r\n        error: (err) => {\r\n          // If we can not fetch live data from given url try to load\r\n          // backup data from assets/rawRecoveredDataBackup.csv\r\n          Papa.parse(rawRecoveredDataBackup, {\r\n            header: false,\r\n            skipEmptyLines: true,\r\n            download: true,\r\n            dynamicTyping: true, //ensures that numbers not turned to strings\r\n            complete: (res) => {\r\n              // Backup data successfully loaded. Store it to rawRecoveredData to use it later!\r\n              rawRecoveredData = res;\r\n              resolve(rawRecoveredData);\r\n            },\r\n            error: (err) => {\r\n              // this block of code should not be executed at all if backup\r\n              // data is not corrupted - Defensive\r\n              rawRecoveredData = null;\r\n              resolve(rawRecoveredData);\r\n            },\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      // If rawData is not null then we already have got our data, return it.\r\n      resolve(rawRecoveredData);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * This function is used for getting all the coordinates from raw data which is\r\n * fetched by using GetRawData() alongside total case count and seperated\r\n * country/state knowledge.\r\n * This method is exported to use in components such as Map and Chart component\r\n */\r\nconst GetCountryStateData = async function () {\r\n  return new Promise((resolve) => {\r\n    GetRawData().then((raw) => {\r\n      if (coordinates === undefined || coordinates.length === 0) {\r\n        // array empty or does not exist\r\n        // fetch from external source and store it!\r\n        let months = [];\r\n        let totalCol = raw.data[0].length;\r\n        for (let i = dataStartIndex; i < totalCol; ++i) {\r\n          let date = new Date(raw.data[0][i]);\r\n          let currMonth = date.getMonth();\r\n          let currYear = date.getFullYear();\r\n          let isExist = months.findIndex(\r\n            (x) => x.key === currMonth + \"(\" + currYear + \")\"\r\n          );\r\n          if (isExist === -1) {\r\n            // if we encounter with new month then add it to month array\r\n            // by giving day count as 1\r\n            // store months with years i.e. May (2020) as a KEY\r\n            months.push({\r\n              key: currMonth + \"(\" + currYear + \")\",\r\n              daysCount: 1,\r\n              month: currMonth,\r\n              year: currYear,\r\n            });\r\n          } else {\r\n            // if already exist in month array just increase day count by 1\r\n            months[isExist].daysCount++;\r\n          }\r\n        }\r\n        // now we have our month/day array as ready to be used disease counting\r\n\r\n        // get rid of first line since it is header-column\r\n        raw.data = raw.data.slice(1, raw.data.length);\r\n\r\n        raw.data.forEach((row) => {\r\n          let caseByMonth = [];\r\n          let i = dataStartIndex;\r\n          let prevCount = 0;\r\n          months.forEach((m) => {\r\n            let count = 0;\r\n\r\n            // this is the total case count at the end of the each month\r\n            count = row[i + m.daysCount - 1];\r\n\r\n            // now we have our monthly disease count here\r\n            caseByMonth.push({\r\n              key: m.key,\r\n              days: m.daysCount,\r\n              count: count - prevCount,\r\n              month: m.month,\r\n              year: m.year,\r\n            });\r\n            prevCount = count;\r\n\r\n            // set next iteration index which will be used in for loop j element\r\n            i += m.daysCount;\r\n          });\r\n\r\n          // sum all individual monthly data to find total count at the end\r\n          let totalCase = caseByMonth.reduce(\r\n            (sum, elem) => sum + elem.count,\r\n            0\r\n          );\r\n\r\n          coordinates.push({\r\n            countryName: row[countryIndex] || \"Undefined\",\r\n            stateName: row[stateIndex] || null,\r\n            totalCase: totalCase,\r\n            detailedCase: caseByMonth,\r\n            x: row[longitudeIndex] || 0,\r\n            y: row[latitudeIndex] || 0,\r\n          });\r\n        });\r\n\r\n        // filter empty coordinates\r\n        coordinates = coordinates.filter((elem) => {\r\n          return elem.x !== 0 && elem.y !== 0;\r\n        });\r\n\r\n        resolve(coordinates);\r\n      } else {\r\n        // If coordinates is not null then we already have got our data, return it.\r\n        resolve(coordinates);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * This function is used for getting all Death Cases for each country\r\n */\r\nconst GetDeathsGlobalData = async function () {\r\n  return new Promise((resolve) => {\r\n    GetRawDeathsData().then((raw) => {\r\n      let months = [];\r\n      let totalCol = raw.data[0].length;\r\n      for (let i = dataStartIndex; i < totalCol; ++i) {\r\n        let currMonth = new Date(raw.data[0][i]).getMonth();\r\n        let isExist = months.findIndex((x) => x.month === currMonth);\r\n        if (isExist === -1) {\r\n          // if we encounter with new month then add it to month array\r\n          // by giving day count as 1\r\n          months.push({ month: currMonth, daysCount: 1 });\r\n        } else {\r\n          // if already exist in month array just increase day count by 1\r\n          months[isExist].daysCount++;\r\n        }\r\n      }\r\n      // now we have our month/day array as ready to be used death cases counting\r\n\r\n      // get rid of first line since it is header-column\r\n      raw.data = raw.data.slice(1, raw.data.length);\r\n\r\n      let deaths = [];\r\n      raw.data.forEach((row) => {\r\n        let caseByMonth = [];\r\n        let i = dataStartIndex;\r\n        let prevCount = 0;\r\n        months.forEach((m) => {\r\n          let count = 0;\r\n\r\n          // this is the total case count at the end of the each month\r\n          count = row[i + m.daysCount - 1];\r\n\r\n          // now we have our monthly disease count here\r\n          caseByMonth.push({\r\n            month: m.month,\r\n            days: m.daysCount,\r\n            count: count - prevCount,\r\n          });\r\n          prevCount = count;\r\n\r\n          // set next iteration index which will be used in for loop j element\r\n          i += m.daysCount;\r\n        });\r\n\r\n        // sum all individual monthly data to find total count at the end\r\n        let totalCase = caseByMonth.reduce((sum, elem) => sum + elem.count, 0);\r\n        deaths.push({\r\n          countryName: row[countryIndex] || \"Undefined\",\r\n          stateName: row[stateIndex] || null,\r\n          totalCase: totalCase,\r\n          detailedCase: caseByMonth,\r\n        });\r\n      });\r\n      resolve(deaths);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * This function is used for getting all Recovered Cases for each country\r\n */\r\nconst GetRecoveredGlobalData = async function () {\r\n  return new Promise((resolve) => {\r\n    GetRawRecoveredData().then((raw) => {\r\n      let months = [];\r\n      let totalCol = raw.data[0].length;\r\n      for (let i = dataStartIndex; i < totalCol; ++i) {\r\n        let currMonth = new Date(raw.data[0][i]).getMonth();\r\n        let isExist = months.findIndex((x) => x.month === currMonth);\r\n        if (isExist === -1) {\r\n          // if we encounter with new month then add it to month array\r\n          // by giving day count as 1\r\n          months.push({ month: currMonth, daysCount: 1 });\r\n        } else {\r\n          // if already exist in month array just increase day count by 1\r\n          months[isExist].daysCount++;\r\n        }\r\n      }\r\n      // now we have our month/day array as ready to be used recovered cases counting\r\n\r\n      // get rid of first line since it is header-column\r\n      raw.data = raw.data.slice(1, raw.data.length);\r\n\r\n      let recoveries = [];\r\n      raw.data.forEach((row) => {\r\n        let caseByMonth = [];\r\n        let i = dataStartIndex;\r\n        let prevCount = 0;\r\n        months.forEach((m) => {\r\n          let count = 0;\r\n\r\n          // this is the total case count at the end of the each month\r\n          count = row[i + m.daysCount - 1];\r\n\r\n          // now we have our monthly disease count here\r\n          caseByMonth.push({\r\n            month: m.month,\r\n            days: m.daysCount,\r\n            count: count - prevCount,\r\n          });\r\n          prevCount = count;\r\n\r\n          // set next iteration index which will be used in for loop j element\r\n          i += m.daysCount;\r\n        });\r\n\r\n        // sum all individual monthly data to find total count at the end\r\n        let totalCase = caseByMonth.reduce((sum, elem) => sum + elem.count, 0);\r\n        recoveries.push({\r\n          countryName: row[countryIndex] || \"Undefined\",\r\n          stateName: row[stateIndex] || null,\r\n          totalCase: totalCase,\r\n          detailedCase: caseByMonth,\r\n        });\r\n      });\r\n      resolve(recoveries);\r\n    });\r\n  });\r\n};\r\n\r\nconst LookupTable = () => {};\r\n\r\nexport {\r\n  GetCountryStateData,\r\n  GetRecoveredGlobalData,\r\n  GetDeathsGlobalData,\r\n  LookupTable,\r\n};\r\n","const countryDictionary = {\r\n  Afghanistan: \"Afghanistan\",\r\n  Angola: \"Angola\",\r\n  Albania: \"Albania\",\r\n  \"United Arab Emirates\": \"United Arab Emirates\",\r\n  Argentina: \"Argentina\",\r\n  Armenia: \"Armenia\",\r\n  Antarctica: \"\",\r\n  \"French Southern and Antarctic Lands\": \"\",\r\n  Australia: \"Australia\",\r\n  Austria: \"Austria\",\r\n  Azerbaijan: \"Azerbaijan\",\r\n  Burundi: \"Burundi\",\r\n  Belgium: \"Belgium\",\r\n  Benin: \"Benin\",\r\n  \"Burkina Faso\": \"Burkina Faso\",\r\n  Bangladesh: \"Bangladesh\",\r\n  Bulgaria: \"Bulgaria\",\r\n  \"The Bahamas\": \"Bahamas\",\r\n  \"Bosnia and Herzegovina\": \"Bosnia and Herzegovina\",\r\n  Belarus: \"Belarus\",\r\n  Belize: \"Belize\",\r\n  Bermuda: \"United Kingdom\",\r\n  Bolivia: \"Bolivia\",\r\n  Brazil: \"Brazil\",\r\n  Brunei: \"Brunei\",\r\n  Bhutan: \"Bhutan\",\r\n  Botswana: \"Botswana\",\r\n  \"Central African Republic\": \"Central African Republic\",\r\n  Canada: \"Canada\",\r\n  Switzerland: \"Switzerland\",\r\n  Chile: \"Chile\",\r\n  China: \"China\",\r\n  \"Ivory Coast\": \"\",\r\n  Cameroon: \"Cameroon\",\r\n  \"Democratic Republic of the Congo\": \"Congo (Kinshasa)\",\r\n  \"Republic of the Congo\": \"Congo (Brazzaville)\",\r\n  Colombia: \"Colombia\",\r\n  \"Costa Rica\": \"Costa Rica\",\r\n  Cuba: \"Cuba\",\r\n  \"Northern Cyprus\": \"Cyprus\",\r\n  Cyprus: \"Cyprus\",\r\n  \"Czech Republic\": \"Czechia\",\r\n  Germany: \"Germany\",\r\n  Djibouti: \"Djibouti\",\r\n  Denmark: \"Denmark\",\r\n  \"Dominican Republic\": \"Dominican Republic\",\r\n  Algeria: \"Algeria\",\r\n  Ecuador: \"Ecuador\",\r\n  Egypt: \"Egypt\",\r\n  Eritrea: \"Eritrea\",\r\n  Spain: \"Spain\",\r\n  Estonia: \"Estonia\",\r\n  Ethiopia: \"Ethiopia\",\r\n  Finland: \"Finland\",\r\n  Fiji: \"Fiji\",\r\n  \"Falkland Islands\": \"United Kingdom\",\r\n  France: \"France\",\r\n  Gabon: \"Gabon\",\r\n  \"United Kingdom\": \"United Kingdom\",\r\n  Georgia: \"Georgia\",\r\n  Ghana: \"Ghana\",\r\n  Guinea: \"Guinea\",\r\n  Gambia: \"Gambia\",\r\n  \"Guinea Bissau\": \"Guinea-Bissau\",\r\n  \"Equatorial Guinea\": \"Equatorial Guinea\",\r\n  Greece: \"Greece\",\r\n  Greenland: \"Denmark\",\r\n  Guatemala: \"Guatemala\",\r\n  \"French Guiana\": \"France\",\r\n  Guyana: \"Guyana\",\r\n  Honduras: \"Honduras\",\r\n  Croatia: \"Croatia\",\r\n  Haiti: \"Haiti\",\r\n  Hungary: \"Hungary\",\r\n  Indonesia: \"Indonesia\",\r\n  India: \"India\",\r\n  Ireland: \"Ireland\",\r\n  Iran: \"Iran\",\r\n  Iraq: \"Iraq\",\r\n  Iceland: \"Iceland\",\r\n  Israel: \"Israel\",\r\n  Italy: \"Italy\",\r\n  Jamaica: \"Jamaica\",\r\n  Jordan: \"Jordan\",\r\n  Japan: \"Japan\",\r\n  Kazakhstan: \"Kazakhstan\",\r\n  Kenya: \"Kenya\",\r\n  Kyrgyzstan: \"Kyrgyzstan\",\r\n  Cambodia: \"Cambodia\",\r\n  \"South Korea\": \"Korea, South\",\r\n  Kosovo: \"Kosovo\",\r\n  Kuwait: \"Kuwait\",\r\n  Laos: \"Laos\",\r\n  Lebanon: \"Lebanon\",\r\n  Liberia: \"Liberia\",\r\n  Libya: \"Libya\",\r\n  \"Sri Lanka\": \"Sri Lanka\",\r\n  Lesotho: \"Lesotho\",\r\n  Lithuania: \"Lithuania\",\r\n  Luxembourg: \"Luxembourg\",\r\n  Latvia: \"Latvia\",\r\n  Morocco: \"Morocco\",\r\n  Moldova: \"Moldova\",\r\n  Madagascar: \"Madagascar\",\r\n  Mexico: \"Mexico\",\r\n  Macedonia: \"North Macedonia\",\r\n  Mali: \"Mali\",\r\n  Myanmar: \"Burma\",\r\n  Montenegro: \"Montenegro\",\r\n  Mongolia: \"Mongolia\",\r\n  Mozambique: \"Mozambique\",\r\n  Mauritania: \"Mauritania\",\r\n  Malawi: \"Malawi\",\r\n  Malaysia: \"Malaysia\",\r\n  Namibia: \"Namibia\",\r\n  \"New Caledonia\": \"France\",\r\n  Niger: \"Niger\",\r\n  Nigeria: \"Nigeria\",\r\n  Nicaragua: \"Nicaragua\",\r\n  Netherlands: \"Netherlands\",\r\n  Norway: \"Norway\",\r\n  Nepal: \"Nepal\",\r\n  \"New Zealand\": \"New Zealand\",\r\n  Oman: \"Oman\",\r\n  Pakistan: \"Pakistan\",\r\n  Panama: \"Panama\",\r\n  Peru: \"Peru\",\r\n  Philippines: \"Philippines\",\r\n  \"Papua New Guinea\": \"Papua New Guinea\",\r\n  Poland: \"Poland\",\r\n  \"Puerto Rico\": \"\",\r\n  \"North Korea\": \"\",\r\n  Portugal: \"Portugal\",\r\n  Paraguay: \"Paraguay\",\r\n  Qatar: \"Qatar\",\r\n  Romania: \"Romania\",\r\n  Russia: \"Russia\",\r\n  Rwanda: \"Rwanda\",\r\n  \"Western Sahara\": \"Western Sahara\",\r\n  \"Saudi Arabia\": \"Saudi Arabia\",\r\n  Sudan: \"Sudan\",\r\n  \"South Sudan\": \"South Sudan\",\r\n  Senegal: \"Senegal\",\r\n  \"Solomon Islands\": \"\",\r\n  \"Sierra Leone\": \"Sierra Leone\",\r\n  \"El Salvador\": \"El Salvador\",\r\n  Somaliland: \"\",\r\n  Somalia: \"Somalia\",\r\n  \"Republic of Serbia\": \"Serbia\",\r\n  Suriname: \"Suriname\",\r\n  Slovakia: \"Slovakia\",\r\n  Slovenia: \"Slovenia\",\r\n  Sweden: \"Sweden\",\r\n  Swaziland: \"Eswatini\",\r\n  Syria: \"Syria\",\r\n  Chad: \"Chad\",\r\n  Togo: \"Togo\",\r\n  Thailand: \"Thailand\",\r\n  Tajikistan: \"Tajikistan\",\r\n  Turkmenistan: \"\",\r\n  \"East Timor\": \"Timor-Leste\",\r\n  \"Trinidad and Tobago\": \"Trinidad and Tobago\",\r\n  Tunisia: \"Tunisia\",\r\n  Turkey: \"Turkey\",\r\n  Taiwan: \"Taiwan*\",\r\n  \"United Republic of Tanzania\": \"Tanzania\",\r\n  Uganda: \"Uganda\",\r\n  Ukraine: \"Ukraine\",\r\n  Uruguay: \"Uruguay\",\r\n  \"United States of America\": \"US\",\r\n  Uzbekistan: \"Uzbekistan\",\r\n  Venezuela: \"Venezuela\",\r\n  Vietnam: \"Vietnam\",\r\n  Vanuatu: \"\",\r\n  \"West Bank\": \"West Bank and Gaza\",\r\n  Yemen: \"Yemen\",\r\n  \"South Africa\": \"South Africa\",\r\n  Zambia: \"Zambia\",\r\n  Zimbabwe: \"Zimbabwe\",\r\n};\r\n\r\nexport default countryDictionary;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ChartComponent from \"chart.js\";\r\nimport { GetCountryStateData } from \"../data\";\r\nimport CountryLookupTable from \"../assets/countriesLookupTable\";\r\n\r\nconst ChartRangeEnum = {\r\n  ONE_YEAR: \"one_year\",\r\n  THREE_YEAR: \"three_year\",\r\n};\r\n\r\nvar ctx = null;\r\nvar Chart = {\r\n  chart: null,\r\n  backupData: null,\r\n  chartRange: ChartRangeEnum.ONE_YEAR,\r\n  Init: () => {\r\n    // Cold Start\r\n    FetchData(\"Turkey\");\r\n  },\r\n  Update: (countryName, labels, data, total) => {\r\n    // update chart data\r\n    Chart.chart.clear();\r\n    Chart.chart.data.labels = labels;\r\n    Chart.chart.data.datasets.forEach((dataset) => {\r\n      // there is only one dataset in array\r\n      dataset.label = \"\";\r\n      dataset.data = data;\r\n    });\r\n    Chart.chart.options.title.text = [\r\n      `Monthly Disease Count of ${countryName}`,\r\n      `(Total: ${total})`,\r\n    ];\r\n    Chart.chart.update();\r\n  },\r\n  Lookup: (data, countryName) => {\r\n    // filter countries with given name\r\n    let found = data.filter((elem) => {\r\n      return elem.countryName === CountryLookupTable[countryName];\r\n    });\r\n\r\n    // Defensive\r\n    if (found.length < 1) {\r\n      // If there is no data for selected country then show \"Not Found\" component\r\n      found = null;\r\n    }\r\n\r\n    // return array of countries\r\n    return found;\r\n  },\r\n  FilterChartRange: (unfilteredCountryDiseaseData) => {\r\n    // Filter raw country disease data in regards to current chart range selection\r\n    switch (Chart.chartRange) {\r\n      case ChartRangeEnum.ONE_YEAR:\r\n        // current date\r\n        let dateRangeEnd = new Date();\r\n        // go back 1 year\r\n        let dateRangeStart = new Date(dateRangeEnd.valueOf());\r\n        dateRangeStart.setFullYear(dateRangeEnd.getFullYear() - 1);\r\n        dateRangeStart.setDate(1);\r\n        // filter only cases in date range\r\n        return unfilteredCountryDiseaseData.filter((currentCase) => {\r\n          let currentCasesDate = new Date(currentCase.year, currentCase.month);\r\n          return (\r\n            dateRangeStart <= currentCasesDate &&\r\n            currentCasesDate <= dateRangeEnd\r\n          );\r\n        });\r\n      default:\r\n      // don't know yet what to do!\r\n    }\r\n  },\r\n};\r\n\r\nconst monthsReference = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nasync function FetchData(countryName) {\r\n  // Wait for response\r\n  await GetCountryStateData()\r\n    .then((res) => {\r\n      // store it for further use!\r\n      Chart.backupData = res;\r\n\r\n      // make this search according to selection on map later!\r\n      let active = res.find((elem) => {\r\n        return elem.countryName === countryName;\r\n      });\r\n\r\n      // find out month names\r\n      let labels = [];\r\n      let data = [];\r\n      let filteredData = Chart.FilterChartRange(active.detailedCase);\r\n      filteredData.forEach((elem) => {\r\n        if (elem.month < monthsReference.length) {\r\n          labels.push(monthsReference[elem.month] + \"(\" + elem.year + \")\");\r\n          data.push(elem.count);\r\n        }\r\n      });\r\n\r\n      ctx = document.getElementById(\"myChart\").getContext(\"2d\");\r\n      Chart.chart = new ChartComponent(ctx, {\r\n        // The type of chart we want to create\r\n        type: \"line\",\r\n\r\n        // The data for our dataset\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: \"\",\r\n              backgroundColor: \"rgb(255, 255, 255, 0)\",\r\n              borderColor: \"rgb(240, 94, 35)\",\r\n              data: data,\r\n            },\r\n          ],\r\n        },\r\n\r\n        // Configuration options go here\r\n        options: {\r\n          title: {\r\n            display: true,\r\n            text: [\r\n              `Monthly Disease Count of ${active.countryName}`,\r\n              `(Total: ${active.totalCase})`,\r\n            ],\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n        },\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n}\r\n\r\nasync function ReDraw(CountryName) {\r\n  let countries = Chart.Lookup(Chart.backupData, CountryName);\r\n\r\n  if (countries === null) {\r\n    // then display \"Not Found\" component!\r\n    return false;\r\n  } else {\r\n    // find out month names\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    // each country has same length of month so check the first one\r\n    Chart.FilterChartRange(countries[0].detailedCase).forEach((elem) => {\r\n      if (elem.month < monthsReference.length) {\r\n        // labels for each month\r\n        labels.push(monthsReference[elem.month] + \"(\" + elem.year + \")\");\r\n\r\n        // init data with 0 for each month\r\n        data.push(0);\r\n      }\r\n    });\r\n\r\n    // fill up monthly counts from filtered country list\r\n    let total = 0;\r\n    countries.forEach((country) => {\r\n      total += country.totalCase;\r\n      let i = 0;\r\n      Chart.FilterChartRange(country.detailedCase).forEach((elem) => {\r\n        data[i] += elem.count;\r\n        ++i;\r\n      });\r\n    });\r\n\r\n    // renew chart data\r\n    Chart.Update(CountryName, labels, data, total);\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChartCanvas(props) {\r\n  const [dataFound, setDataFound] = useState(true);\r\n  useEffect(() => {\r\n    // Initial State\r\n    Chart.Init();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // At first time we know that chart will be null\r\n    // So that, take prop update only after initialization\r\n    async function draw() {\r\n      if (Chart.chart) {\r\n        // if chart is not null than update it\r\n        setDataFound(await ReDraw(props.CountryName));\r\n      }\r\n    }\r\n\r\n    draw();\r\n  }, [props.CountryName]);\r\n\r\n  // Note!: Do not remove chart canvas from DOM if data is not found since Chart Canvas is configurated only in INIT state via FetchData function\r\n  // Just re-arrange visiblity on DOM\r\n  return (\r\n    <div className=\"h-100\">\r\n      <canvas\r\n        id=\"myChart\"\r\n        style={{ display: dataFound === false ? \"none\" : \"block\" }}\r\n      ></canvas>\r\n      <div\r\n        style={{\r\n          background: \"lightblue\",\r\n          height: \"100%\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          display: dataFound === false ? \"flex\" : \"none\",\r\n        }}\r\n      >\r\n        <strong>No Data Found for This Country</strong>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartCanvas;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ChartComponent from \"chart.js\";\r\nimport CountryLookupTable from \"../assets/countriesLookupTable\";\r\nimport { GetDeathsGlobalData, GetRecoveredGlobalData } from \"../data\";\r\n\r\nvar ctx = null;\r\nvar Chart = {\r\n  chart: null,\r\n  backupDataDeaths: null,\r\n  backupDataRecovered: null,\r\n  labels: [\"Deaths\", \"Recoveries\"],\r\n  Init: () => {\r\n    // Cold Start\r\n    FetchData(\"Turkey\");\r\n  },\r\n  Update: (data) => {\r\n    // update chart data\r\n    Chart.chart.clear();\r\n    Chart.chart.data.labels = Chart.labels;\r\n    Chart.chart.data.datasets.forEach((dataset) => {\r\n      // there is only one dataset in array\r\n      dataset.data = data;\r\n    });\r\n    Chart.chart.update();\r\n  },\r\n  Lookup: (data, countryName) => {\r\n    // filter countries with given name\r\n    let found = data.filter((elem) => {\r\n      return elem.countryName === CountryLookupTable[countryName];\r\n    });\r\n\r\n    // Defensive\r\n    if (found.length < 1) {\r\n      // If there is no data for selected country then show \"Not Found\" component\r\n      found = null;\r\n    }\r\n\r\n    // return array of countries\r\n    return found;\r\n  },\r\n};\r\n\r\nasync function FetchData(countryName) {\r\n  let totalDeath = 0;\r\n  let totalRecover = 0;\r\n\r\n  // Wait for response\r\n  await GetDeathsGlobalData().then((res) => {\r\n    // store it for further use!\r\n    Chart.backupDataDeaths = res;\r\n\r\n    // make this search according to selection on map later!\r\n    let active = res.find((elem) => {\r\n      return elem.countryName === countryName;\r\n    });\r\n\r\n    totalDeath = active.totalCase;\r\n  });\r\n\r\n  // Wait for response\r\n  await GetRecoveredGlobalData().then((res) => {\r\n    // store it for further use!\r\n    Chart.backupDataRecovered = res;\r\n\r\n    // make this search according to selection on map later!\r\n    let active = res.find((elem) => {\r\n      return elem.countryName === countryName;\r\n    });\r\n\r\n    totalRecover = active.totalCase;\r\n  });\r\n\r\n  // And for a doughnut chart\r\n  ctx = document.getElementById(\"myPieChart\").getContext(\"2d\");\r\n  Chart.chart = new ChartComponent(ctx, {\r\n    type: \"doughnut\",\r\n    data: {\r\n      datasets: [\r\n        {\r\n          backgroundColor: [\r\n            // lightgray\r\n            \"rgb(211, 211, 211)\",\r\n            // lightgreen\r\n            \"rgb(144,238,144)\",\r\n          ],\r\n          borderColor: \"rgb(255,255,255)\",\r\n          data: [totalDeath, totalRecover],\r\n        },\r\n      ],\r\n\r\n      // These labels appear in the legend and in the tooltips when hovering different arcs\r\n      labels: Chart.labels,\r\n    },\r\n    //options: options\r\n  });\r\n}\r\n\r\nasync function ReDraw(CountryName) {\r\n  let countriesForDeaths = Chart.Lookup(Chart.backupDataDeaths, CountryName);\r\n  let countriesForRecoveries = Chart.Lookup(\r\n    Chart.backupDataRecovered,\r\n    CountryName\r\n  );\r\n\r\n  if (countriesForDeaths === null || countriesForRecoveries === null) {\r\n    // then display \"Not Found\" component!\r\n    return false;\r\n  } else {\r\n    let data,\r\n      totalDeath = 0,\r\n      totalRecovery = 0;\r\n    countriesForDeaths.forEach((country) => {\r\n      totalDeath += country.totalCase;\r\n    });\r\n    countriesForRecoveries.forEach((country) => {\r\n      totalRecovery += country.totalCase;\r\n    });\r\n\r\n    data = [totalDeath, totalRecovery];\r\n\r\n    // renew chart data\r\n    Chart.Update(data);\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction PieChartCanvas(props) {\r\n  useEffect(() => {\r\n    // Initial State\r\n    Chart.Init();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // At first time we know that chart will be null\r\n    // So that, take prop update only after initialization\r\n    async function draw() {\r\n      if (Chart.chart) {\r\n        // if chart is not null than update it\r\n        await ReDraw(props.CountryName);\r\n      }\r\n    }\r\n\r\n    draw();\r\n  }, [props.CountryName]);\r\n  return (\r\n    <div>\r\n      <canvas id=\"myPieChart\"></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChartCanvas;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n// get exported javascript functions\r\nimport { getTotalRepoCount, getRepoCounts } from \"../githubData\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\n// 5 miniutes\r\nconst cookieExpire = 300;\r\n\r\nconst initialValueCountByMonth = [\r\n  { id: 0, value: 0 },\r\n  { id: 1, value: 0 },\r\n  { id: 2, value: 0 },\r\n  { id: 3, value: 0 },\r\n];\r\nconst months = [\"January\", \"February\", \"March\", \"April\"];\r\n\r\nfunction Github() {\r\n  const [cookies, setCookie, removeCookie] = useCookies([\r\n    \"totalRepoCount\",\r\n    \"monthlyRepoCount\",\r\n  ]);\r\n\r\n  const [totalRepo, setTotalRepo] = useState(0);\r\n  const [countByMonths, setCountByMonths] = useState(initialValueCountByMonth);\r\n  useEffect(() => {\r\n    if (cookies.totalRepoCount) {\r\n      // use cookie to prevent api request frequently\r\n      setTotalRepo(cookies.totalRepoCount);\r\n    } else {\r\n      // api requests\r\n      getTotalRepoCount().then((response) => {\r\n        setTotalRepo(response);\r\n\r\n        // store it in cookie\r\n        // set cookie with expire seconds - maxAge\r\n        setCookie(\"totalRepoCount\", JSON.stringify(response), {\r\n          path: \"/\",\r\n          maxAge: cookieExpire,\r\n        });\r\n      });\r\n    }\r\n\r\n    if (cookies.monthlyRepoCount) {\r\n      if (!cookies.monthlyRepoCount.monthlyData) {\r\n        //something is wrong with the cookie. Delete it\r\n        removeCookie(\"monthlyRepoCount\");\r\n      } else {\r\n        setCountByMonths(cookies.monthlyRepoCount.monthlyData);\r\n      }\r\n    } else {\r\n      getRepoCounts()\r\n        .then(\r\n          axios.spread((...res) => {\r\n            var [...temp] = [...res];\r\n            const fetchedCountByMonth = temp.map((val, index) => {\r\n              return { id: index, value: val.data.total_count };\r\n            });\r\n            setCountByMonths(fetchedCountByMonth);\r\n\r\n            // store it in cookie\r\n            let cookieObject = {\r\n              monthlyData: fetchedCountByMonth,\r\n            };\r\n            // set cookie with expire seconds - maxAge\r\n            setCookie(\"monthlyRepoCount\", JSON.stringify(cookieObject), {\r\n              path: \"/\",\r\n              maxAge: cookieExpire,\r\n            });\r\n          })\r\n        )\r\n        .catch((err) => {\r\n          console.log(\"error on getRepoCounts(): \" + err);\r\n        });\r\n    }\r\n  }, [\r\n    cookies.totalRepoCount,\r\n    cookies.monthlyRepoCount,\r\n    setCookie,\r\n    removeCookie,\r\n  ]);\r\n\r\n  return (\r\n    <table className=\"table table-hover\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Total number of COVID related repositories on Github</td>\r\n          <td>{totalRepo}</td>\r\n        </tr>\r\n        {countByMonths &&\r\n          countByMonths.map((countByMonth, index) => (\r\n            <tr key={index}>\r\n              <td>Repo Counts on {months[index]}</td>\r\n              <td>{countByMonth.value}</td>\r\n            </tr>\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Github;\r\n","import axios from \"axios\";\r\n\r\nexport const getTotalRepoCount = () => {\r\n  return axios\r\n    .get(\r\n      \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:>2020-01-01\"\r\n    )\r\n    .then((res) => {\r\n      return res.data.total_count;\r\n    })\r\n    .catch((err) => {\r\n      return 0;\r\n    });\r\n};\r\n\r\nexport const getRepoCounts = () => {\r\n  const urls = [\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-01-01..2020-01-31\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-02-01..2020-02-29\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-03-01..2020-03-31\",\r\n    \"https://api.github.com/search/repositories?q=covid OR coronavirus in:name,description+created:2020-04-01..*\",\r\n  ];\r\n\r\n  const requests = [\r\n    axios.get(urls[0]),\r\n    axios.get(urls[1]),\r\n    axios.get(urls[2]),\r\n    axios.get(urls[3]),\r\n  ];\r\n\r\n  return axios\r\n    .all([requests[0], requests[1], requests[2], requests[3]])\r\n    .then(\r\n      axios.spread((...responses) => {\r\n        return responses;\r\n        // const res1 = responses[0];\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      return 0;\r\n    });\r\n};\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n});\n\nvar SvgGithubBrands = function SvgGithubBrands(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fab\",\n    \"data-icon\": \"github\",\n    className: \"svg-inline--fa fa-github fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 496 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGithubBrands, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github-brands.ec5bc1b3.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from \"react\";\nimport \"./App.scss\";\n// get map component\nimport Map from \"./Components/Map\";\n// get chart component\nimport ChartCanvas from \"./Components/Chart\";\n// get pie chart component\nimport PieChartCanvas from \"./Components/PieChart\";\n// get github component\nimport Github from \"./Components/Github\";\n// import github icon\nimport { ReactComponent as GithubLogo } from \"./assets/github-brands.svg\";\n\nfunction App() {\n  const [countryName, setCountryName] = useState(\"Turkey\");\n  return (\n    <div className=\"content\">\n      <div className=\"col-xl-8 col-lg-10 col-md-12 col-sm-12 h-100\">\n        <div className=\"d-flex flex-column w-100 h-100\">\n          <div className=\"d-flex flex-column\">\n            <div className=\"title text-center\">\n              COVID Disease Tracker By Country\n            </div>\n            <div className=\"d-flex flex-row\">\n              <div className=\"badges\">\n                <span className=\"badge badge-warning\">React.js</span>\n                <span className=\"badge badge-info\">OpenLayers</span>\n                <span className=\"badge badge-success\">Chart.js</span>\n                <span className=\"badge badge-dark\">Github API</span>\n              </div>\n              <div className=\"ml-auto\" id=\"info\"></div>\n            </div>\n          </div>\n          <div className=\"mb-1\" style={{ height: \"400px\" }}>\n            <Map SetCountryName={setCountryName}></Map>\n          </div>\n          <div className=\"bg-light\" style={{ height: \"250px\" }}>\n            <ChartCanvas CountryName={countryName}></ChartCanvas>\n          </div>\n          <div className=\"mt-1 flexWrap bg-light\">\n            <div className=\"col-md-6 col-sm-12\">\n              <PieChartCanvas CountryName={countryName}></PieChartCanvas>\n            </div>\n            <div className=\"col-md-6 col-sm-12\">\n              <Github></Github>\n            </div>\n          </div>\n          <div className=\"d-flex flex-column mt-auto\">\n            <div id=\"location\">Location: </div>\n            <hr\n              className=\"w-100\"\n              style={{ border: \"1px solid white\", borderRadius: \"5px\" }}\n            ></hr>\n            <div className=\"logo text-center h2 pb-3\">\n              <a\n                className=\"h-100\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/Ardahan-Kisbet/COVID-19\"\n              >\n                <GithubLogo className=\"svg h-100\"></GithubLogo>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\naxios.get(\"https://ipapi.co/json/\").then((res) => {\r\n  document.getElementById(\"location\").append(res.data.country_name);\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./main.js\";\nimport \"./data.js\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}